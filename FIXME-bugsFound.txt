---------------------------------------------------------------------------------------

                           PENDING

---------------------------------------------------------------------------------------

10) Responsive COnfig is not working for Forms: Please look for the responsive definition at: src/components/form/Form.js:29
In order to test this, run the app, then double click in a grid row, the form will appear and then change the size of wht window
you will see in the console log that following error appears:

ext.js:65761 Uncaught TypeError: Cannot read property 'dom' of undefined
    at constructor.moveItem (ext.js:65761)
    at constructor.renderItems (ext.js:65721)
    at constructor.renderChildren (ext.js:66022)
    at constructor.invalidate (ext.js:107541)
    at constructor.invalidate (ext.js:107545)
    at constructor.invalidate (ext.js:107545)
    at constructor.flushInvalidates (ext.js:107454)
    at constructor.run (ext.js:107749)
    at Function.flushLayouts (ext.js:34381)
    at Function.resumeLayouts (ext.js:34386)


11) Mask gift is not loading: Please look at src/components/grid/Grid.js:71. In order to test this, run the app, and then click on
any checkIcon of the grid. A mask will appear but the gift does not appear

Failed to load resource: the server responded with a status of 404 (Not Found) loading.gif:1

12) JEST TESTING: So far we are able to use jest in Ext-React apps by mocking the Ext runtime and every component we use, please check
following paths:

	1. tests/helpers/setup.js:5
	2. tests/helpers/__mocks__/@sencha/ext-react-classic.js:4
	3. package.json:86

The reason to mock is because the jest process doesn't reactify the Sencha Components.

This in cumbersome because we have to do it for every single feature used from Ext Engine, besides we are not able to test fully
most of the components, eg. loading data into a grid as we are not able to create a store.

Is there a way to preload the Ext runtime/engine and the components in order to avoid mocking for using jest + webpack in our testing

In order to test this just make sure you have previously installed Jest and type in terminal: $ jest

[UPDATE USING THE PRECOMPILED EXT RUNTIME]

Using the "@sencha/ext-classic-enterprise-engine" package for Jest, we no longer need to mock the Ext runtime, but we are still getting
two errors:

	1. Error: Not implemented: HTMLCanvasElement.prototype.getContext (without installing the canvas npm package)
	2. Warning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function
	   (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined
	   in, or you might have mixed up default and named imports.

The first one comes from the "@sencha/ext-classic-enterprise-engine" package. This seems to happen because there no actual DOM.
The second error seems that it happens because of the way ExtReact components are exported. It doesn't look like it's using a standard
JS export so the components are not found. 


14) TAB PANELS: Look for the "src\components\main\TabPanel.js" file. That file contains the code and the notes with the issues
listed here:

	* 14-1) The activeTab config doesn't work. The activeTab needs to be set programmatically.	[* SOLVED: activeTab works if children are passed in the "items" config]

	14-2) The tabBar config doesn't support JSX elements. It would be great to add support to JSX components to the tabBar
	config. In this case, I created a mock "logout" button that could be used in other components as well.

	14-3) Looks like the tabConfig config does not support:		style.pointerElements = 'all'.
	This is supported in ExtJS and it's very useful to show tooltips in disabled elements. If you check the "A Logout Here!"
	tab in the app, you can see there's a disabled button that displays a tooltip (pointerElements = 'all' works for the button).

	* 14-4) Returning false in the onBeforetabchange event doesn't prevent the tab from changing.	[* SOLVED: use listeners object instead]

15) Very similar to #9 (but not the same):

	15-1) Ext Container elements do not append children in the correct order using the React way IF the conditionals of the
	elements were initially false. Please check: src\components\grid\Grid.js BUG #15-1.

	15-2) When the key value of the element changes the element is recreated (this needed to recreate views for instance, when
	the Ext component has a property that is not bindable). After the element is recreated, it is appended at the end.
	Please check: src\components\form\Form.js BUG #15-2.

16) Load .scss files the same way that in ExtJS: some views have custom styles and ExtJS mixins that are only used for those
views, but at this moment if we try to define a mixing (e.g., @mixin extjs-button-small-ui) in a scss file outside the scope
of the theme, the application breaks because the ExtJS mixins are not found.

	Please check: src\components\form\Form.js BUG #16, and src\components\form\Form.scss.


------------------------------------------------------------------------------------------

                                    FIXED

------------------------------------------------------------------------------------------

1) [FIXED] field regex validation is not working: If you define following textfield and error is appearing upon input change
	(Uncaught TypeError: regex.test is not a function).

	Please check -> ./src/components/form/Form.js:44

		<ExtTextfield
		  fieldLabel = 'Phone Number'
		  name = 'phone'
		  allowBlank = {false}
		  regex = {/^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im}
		/>

2) [FIXED] (Critical) Column functions like: renderer, getClass, isActionDisabled, are being called several times upon state
	change (This is only happening in classic, and should not happen based on: https://reactjs.org/docs/rendering-elements.html &
	https://reactjs.org/docs/rendering-elements.html#react-only-updates-whats-necessary) In order to test this, you need
	to run the app -> npm start, a grid will appear, there is an action column with an envelope icon, please open the browser console
	and then click on the icon a window should appear, you will see that the render method is being called 12 times and
	there are only 3 records (look for the log -> Method renderSign has been called) and if you clean the console logs
	and then close the window, the render method is being called 24 times. This is causing big slowness in more complex
	views, we have a use case in which we have a view with a tab panel that have at least 8 grids and each grid have at least 8 columns
	and each grid have at least 4 renderers. Note: the render method should not be called, and this does not happen in modern

3) [FIXED] Browser is refreshing before the watch is finished (only happening in classic): In order to test this you need to start
	the app, and then uncomment line. ./src/components/grid/Grid.js:105. You will see that the sencha app compile process start,
	then it refresh the browser, but in the browser app wont render and following error appear:

	Ext.require is not a function
      at Module../App.js (App.js:7)
      at __webpack_require__ (bootstrap:726)
      at fn (bootstrap:100)
      at Module../index.js (index.js:1)
      at __webpack_require__ (bootstrap:726)
      at fn (bootstrap:100)
      at Object.0 (main.js?3de525dfb512234a75ae:114237)
      at __webpack_require__ (bootstrap:726)
      at bootstrap:793
      at bootstrap:793

4) [FIXED] Toolbar Dock top or button is not working: Please look for the Toolbar definition at: ./src/components/grid/Grid.js:116
	and uncomment those lines. we want to have a top toolbar inside a grid without having unnesesary nesting. We know that we have have a wrapper panel for
	the grid and add the toolbar (it is working fine). Just run the app and you will see the result.

5) [FIXED] Panel Split property not working: Please look for Panel definition at: ./src/components/grid/Grid.js:127. We have defined a panel
	with the split property, but the splitter is not showing in the UI

6) [FIXED] Window listeners are not getting fired: Please look at ./src/components/window/Window.js:53 we are trying to log in
	console the show, boxready, afterrender events and we have tried different ways and none one is working. Question - are all the events
	of the components supported? is there any doc for ext react classic? Note - this is working in Modern

7) [FIXED] TextField onFocus and onBlur event is being fired twice: Please look for the

8) [FIXED] 	Grid Cell Renderer does not display tooltips: Please look for the "renderSign" function at
	./src/components/grid/Grid.js. A tooltip was added to the cell doing context.tdAttr = 'data-qtip="my tooltip"'.
	It is supposed to display a tooltip for all the cells of the "% Change" column, but it does not show any
	tooltips in the corresponding grid cells. This is the way it works in ExtJS classic.

9) [FIXED]	Ext Container elements do not append children in the correct order using the React way. In ./src/components/grid/Grid.js
	there's a toolbar which has 10 buttons named from 'One' to 'Ten' (all displayed by default). When the button is clicked,
	the even buttons are hidden. When the button is clicked again, the even buttons should appear in the same order as before.
	However, when the even buttons reappear, they are appended after all the odd buttons instead of their original position.

12) [FIXED] IMPORTANT, please check App,js render method. we are rendering two components based on a state change. But when the state changes,
the second component is not rendering. In order to test this, you just need to run the app and wait for the alert message. If you check
the dev tools, after the state change, the second component is displayed as a web component instead of html

src/App.js:51
src/App.js:28

13) [Fixed] Error when trying to use uxiframe. When we add an iFrame in src/components/form/Form.js the application fails:

Uncaught Error: [Ext.create] Unrecognized class name / alias: widget.uxiframe
    at Object.create (VM10 ext.js:11776)
    at HTMLElement.newDoExtCreate (main.js:65610)
    at HTMLElement.doCreateExtComponent (main.js:65597)
    at ReactComponent.componentDidMount (main.js:6116)
    at commitLifeCycles (main.js:95255)
    at commitLayoutEffects (main.js:98498)
    at HTMLUnknownElement.callCallback (main.js:73490)
    at Object.invokeGuardedCallbackDev (main.js:73539)
    at invokeGuardedCallback (main.js:73594)
    at commitRootImpl (main.js:98236)